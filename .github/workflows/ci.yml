name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install requirements if they exist
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # Install dev requirements if they exist
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi
        # Install common development tools for linting and testing
        pip install flake8 black pytest pytest-cov || true

    - name: Lint with flake8
      run: |
        # Check if flake8 is available and run it
        if command -v flake8 &> /dev/null; then
          echo "Running flake8 linting..."
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        else
          echo "flake8 not available, skipping linting"
        fi

    - name: Format check with black
      run: |
        # Check if black is available and run it
        if command -v black &> /dev/null; then
          echo "Checking code formatting with black..."
          black --check . || echo "Code formatting check completed (non-blocking)"
        else
          echo "black not available, skipping format check"
        fi

    - name: Test with pytest
      run: |
        # Check if pytest is available and run tests
        if command -v pytest &> /dev/null; then
          echo "Running tests with pytest..."
          # Run tests if test directory exists
          if [ -d "tests" ] || [ -d "test" ]; then
            pytest --cov=src --cov-report=xml || echo "Tests completed with some failures (non-blocking for now)"
          else
            echo "No test directory found, skipping tests"
          fi
        else
          echo "pytest not available, skipping tests"
        fi

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false